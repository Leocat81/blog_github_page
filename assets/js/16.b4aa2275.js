(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{493:function(t,e,s){t.exports=s.p+"assets/img/mvvm.34cad1b1.jpg"},522:function(t,e,s){"use strict";s.r(e);var v=s(24),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"vue-渲染机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-渲染机制"}},[t._v("#")]),t._v(" vue 渲染机制")]),t._v(" "),v("p",[t._v("vue 通过render函数生产虚拟dom，解析相应的指令和模板语法。最后通过update挂载到实际的dom节点上。")]),t._v(" "),v("h2",{attrs:{id:"vue-mvvm实现以及响应式原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-mvvm实现以及响应式原理"}},[t._v("#")]),t._v(" vue mvvm实现以及响应式原理")]),t._v(" "),v("p",[v("img",{attrs:{src:s(493),alt:"RUNOOB 图标"}})]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("结论1")]),t._v(" "),v("p",[t._v("vue是采用数据劫持配合发布者-订阅者模式，通过"),v("code",[t._v("Object.defineProperty()")]),t._v("去劫持各个属性的getter和setter,在数据变化时，发布消息给依赖收集器，去通知观察者，做出相应的监听回调，去更新视图")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("结论2")]),t._v(" "),v("p",[t._v("MVVM作为绑定的入口，整合了Observer,Compile和Watcher三者，通过Observe来监听model数据变化表，通过Compile来解析编译模板指令，最终利用Watcher搭起，Observer,Watcher之间的桥梁，达到数据变化=>视图更新;视图交互变化=>数据model变更的双向绑定效果。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);